// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Password password of the user
	Password string `json:"password"`

	// PhoneNumbers phoneNumber of the user
	PhoneNumbers string `json:"phoneNumbers"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	// FullName fullName of the user
	FullName string `json:"fullName"`

	// Password password of the user
	Password *string `json:"password,omitempty"`

	// PasswordConfirmation password confirmation of the user
	PasswordConfirmation *string `json:"passwordConfirmation,omitempty"`

	// PhoneNumbers phoneNumber of the user
	PhoneNumbers string `json:"phoneNumbers"`
}

// User defines model for User.
type User struct {
	// FullName fullName of the user
	FullName string `json:"fullName"`

	// Id Unique id of the pet
	Id int64 `json:"id"`

	// Password password of the user
	Password *string `json:"password,omitempty"`

	// PasswordConfirmation password confirmation of the user
	PasswordConfirmation *string `json:"passwordConfirmation,omitempty"`

	// PhoneNumbers phoneNumber of the user
	PhoneNumbers string `json:"phoneNumbers"`

	// Token token of the user
	Token *string `json:"token,omitempty"`
}

// GetProfileParams defines parameters for GetProfile.
type GetProfileParams struct {
	// Token token of logged in user
	Token *string `form:"token,omitempty" json:"token,omitempty"`
}

// PutProfileParams defines parameters for PutProfile.
type PutProfileParams struct {
	// Token token of logged in user
	Token *string `form:"token,omitempty" json:"token,omitempty"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// PutProfileJSONRequestBody defines body for PutProfile for application/json ContentType.
type PutProfileJSONRequestBody = User

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login the user
	// (POST /login)
	LoginUser(ctx echo.Context) error
	// Returns user's profile
	// (GET /profile)
	GetProfile(ctx echo.Context, params GetProfileParams) error
	// Update User's profile
	// (PUT /profile)
	PutProfile(ctx echo.Context, params PutProfileParams) error
	// Register new User
	// (POST /register)
	RegisterUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfileParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx, params)
	return err
}

// PutProfile converts echo context to params.
func (w *ServerInterfaceWrapper) PutProfile(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PutProfileParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutProfile(ctx, params)
	return err
}

// RegisterUser converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegisterUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.LoginUser)
	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.PUT(baseURL+"/profile", wrapper.PutProfile)
	router.POST(baseURL+"/register", wrapper.RegisterUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWy27bOhD9FWHuBe5GiHyTogstWxRFgDYN0noVeMFII5mtRNLDYVLD0L8XJCU/5fSR",
	"tCnalSXOaB7nnBl6BYVujVao2EK+AlvMsRXh8RWRJv9gSBsklhiOC12i/y3RFiQNS60gj85JsKVQaWoF",
	"Qw5S8dkppMBLg/EVayToUmjRWlEfDTSY159aJqlq6LoUCBdOEpaQX0OfcHCfdSm80bVUV7hwaPmweiOs",
	"vdNUHiYeLImuEp5j4izSYf4UzFwrvHDtDZIdibKx3h9or5GdqOmmTN/RFdbSMtLRpirXNBeiHUFzsHy1",
	"qYfD0vu91KqSnv7w+dFoxZbb0yC+Bm0vgUd86gPkKxBN866C/HoF/xJWkMM/2WZcsn5Wsn1+unSfIDkC",
	"7FTJhcNErpE1yHuz8/zZ6Oyw/oQj2Ibj74JAen3NOn8sVaV9yEYWqGxQkgqKgrfnH0JSyY1/9dAk75Fu",
	"ZeGhu0WyMf3/J5OTiffUBpUwEnI4C0deGzwPOGSNH84gYB2FvNtCmN3t+j2IQSPn5WCeRgtFsF/ochm3",
	"kmJUIaQwppFF+Cr7aKMKI1X+6T4id1ZHgGWsvIBAnz658fm3UWVyGGC2Risb6T+dTB6txtD+SG0uVhWz",
	"QjBXwjX8aInjdTCWWeFngwVjmWDvk4J1bStoecipN2aGdCWboLIaR3RwhexIJaVg4QUtxuXwGvmyD+Q1",
	"RqJFDivi+uhoNLqusUykGiJ6NcLCIXkWe8XH+Uq3cNkfo9kDCZaMrf02ptczLIjEcgz/HoPfkvxIpA1o",
	"/2eTgXe/1N0P837pnoj3FCwvwxb0WxqiDB5/DR0b8eGe+QUb6K8R6NSUgjEguq1Pv6Soh/v4dbUmROFd",
	"EFbCOtGOEru0jO2BcAf/n3iFHfwXeVIZ/VEX2Q7bm+ot0u2wfRw1kMOc2eRZ1uhCNHMvnG7WfQkAAP//",
	"OV2TEGgNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
